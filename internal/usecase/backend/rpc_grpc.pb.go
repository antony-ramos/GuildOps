// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: .proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AbsenceService_Remove_FullMethodName = "/rpc.AbsenceService/Remove"
	AbsenceService_Add_FullMethodName    = "/rpc.AbsenceService/Add"
)

// AbsenceServiceClient is the client API for AbsenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbsenceServiceClient interface {
	Remove(ctx context.Context, in *AbsenceRequest, opts ...grpc.CallOption) (*RemoveAbsenceResponse, error)
	Add(ctx context.Context, in *AbsenceRequest, opts ...grpc.CallOption) (*AddAbsenceResponse, error)
}

type absenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAbsenceServiceClient(cc grpc.ClientConnInterface) AbsenceServiceClient {
	return &absenceServiceClient{cc}
}

func (c *absenceServiceClient) Remove(ctx context.Context, in *AbsenceRequest, opts ...grpc.CallOption) (*RemoveAbsenceResponse, error) {
	out := new(RemoveAbsenceResponse)
	err := c.cc.Invoke(ctx, AbsenceService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *absenceServiceClient) Add(ctx context.Context, in *AbsenceRequest, opts ...grpc.CallOption) (*AddAbsenceResponse, error) {
	out := new(AddAbsenceResponse)
	err := c.cc.Invoke(ctx, AbsenceService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbsenceServiceServer is the server API for AbsenceService service.
// All implementations must embed UnimplementedAbsenceServiceServer
// for forward compatibility
type AbsenceServiceServer interface {
	Remove(context.Context, *AbsenceRequest) (*RemoveAbsenceResponse, error)
	Add(context.Context, *AbsenceRequest) (*AddAbsenceResponse, error)
	mustEmbedUnimplementedAbsenceServiceServer()
}

// UnimplementedAbsenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAbsenceServiceServer struct {
}

func (UnimplementedAbsenceServiceServer) Remove(context.Context, *AbsenceRequest) (*RemoveAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedAbsenceServiceServer) Add(context.Context, *AbsenceRequest) (*AddAbsenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAbsenceServiceServer) mustEmbedUnimplementedAbsenceServiceServer() {}

// UnsafeAbsenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbsenceServiceServer will
// result in compilation errors.
type UnsafeAbsenceServiceServer interface {
	mustEmbedUnimplementedAbsenceServiceServer()
}

func RegisterAbsenceServiceServer(s grpc.ServiceRegistrar, srv AbsenceServiceServer) {
	s.RegisterService(&AbsenceService_ServiceDesc, srv)
}

func _AbsenceService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbsenceServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbsenceService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbsenceServiceServer).Remove(ctx, req.(*AbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbsenceService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbsenceServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbsenceService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbsenceServiceServer).Add(ctx, req.(*AbsenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AbsenceService_ServiceDesc is the grpc.ServiceDesc for AbsenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbsenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AbsenceService",
	HandlerType: (*AbsenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _AbsenceService_Remove_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _AbsenceService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".proto",
}

const (
	RaidService_ListAbsOnRaid_FullMethodName = "/rpc.RaidService/ListAbsOnRaid"
)

// RaidServiceClient is the client API for RaidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaidServiceClient interface {
	ListAbsOnRaid(ctx context.Context, in *ListAbsOnRaidRequest, opts ...grpc.CallOption) (*ListAbsOnRaidResponse, error)
}

type raidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaidServiceClient(cc grpc.ClientConnInterface) RaidServiceClient {
	return &raidServiceClient{cc}
}

func (c *raidServiceClient) ListAbsOnRaid(ctx context.Context, in *ListAbsOnRaidRequest, opts ...grpc.CallOption) (*ListAbsOnRaidResponse, error) {
	out := new(ListAbsOnRaidResponse)
	err := c.cc.Invoke(ctx, RaidService_ListAbsOnRaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaidServiceServer is the server API for RaidService service.
// All implementations must embed UnimplementedRaidServiceServer
// for forward compatibility
type RaidServiceServer interface {
	ListAbsOnRaid(context.Context, *ListAbsOnRaidRequest) (*ListAbsOnRaidResponse, error)
	mustEmbedUnimplementedRaidServiceServer()
}

// UnimplementedRaidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRaidServiceServer struct {
}

func (UnimplementedRaidServiceServer) ListAbsOnRaid(context.Context, *ListAbsOnRaidRequest) (*ListAbsOnRaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAbsOnRaid not implemented")
}
func (UnimplementedRaidServiceServer) mustEmbedUnimplementedRaidServiceServer() {}

// UnsafeRaidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaidServiceServer will
// result in compilation errors.
type UnsafeRaidServiceServer interface {
	mustEmbedUnimplementedRaidServiceServer()
}

func RegisterRaidServiceServer(s grpc.ServiceRegistrar, srv RaidServiceServer) {
	s.RegisterService(&RaidService_ServiceDesc, srv)
}

func _RaidService_ListAbsOnRaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAbsOnRaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaidServiceServer).ListAbsOnRaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaidService_ListAbsOnRaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaidServiceServer).ListAbsOnRaid(ctx, req.(*ListAbsOnRaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaidService_ServiceDesc is the grpc.ServiceDesc for RaidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RaidService",
	HandlerType: (*RaidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAbsOnRaid",
			Handler:    _RaidService_ListAbsOnRaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".proto",
}
