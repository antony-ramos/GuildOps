// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antony-ramos/guildops/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// StrikeUseCase is an autogenerated mock type for the StrikeUseCase type
type StrikeUseCase struct {
	mock.Mock
}

// CreateStrike provides a mock function with given fields: ctx, strikeReason, playerName
func (_m *StrikeUseCase) CreateStrike(ctx context.Context, strikeReason string, playerName string) error {
	ret := _m.Called(ctx, strikeReason, playerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, strikeReason, playerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStrike provides a mock function with given fields: ctx, id
func (_m *StrikeUseCase) DeleteStrike(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadStrikes provides a mock function with given fields: ctx, playerName
func (_m *StrikeUseCase) ReadStrikes(ctx context.Context, playerName string) ([]entity.Strike, error) {
	ret := _m.Called(ctx, playerName)

	var r0 []entity.Strike
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Strike, error)); ok {
		return rf(ctx, playerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Strike); ok {
		r0 = rf(ctx, playerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Strike)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStrikeUseCase creates a new instance of StrikeUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrikeUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *StrikeUseCase {
	mock := &StrikeUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
