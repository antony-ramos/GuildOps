// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antony-ramos/guildops/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// PlayerUseCase is an autogenerated mock type for the PlayerUseCase type
type PlayerUseCase struct {
	mock.Mock
}

// CreatePlayer provides a mock function with given fields: ctx, playerName
func (_m *PlayerUseCase) CreatePlayer(ctx context.Context, playerName string) (int, error) {
	ret := _m.Called(ctx, playerName)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, playerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, playerName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: ctx, playerName
func (_m *PlayerUseCase) DeletePlayer(ctx context.Context, playerName string) error {
	ret := _m.Called(ctx, playerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, playerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkPlayer provides a mock function with given fields: ctx, playerName, discordID
func (_m *PlayerUseCase) LinkPlayer(ctx context.Context, playerName string, discordID string) error {
	ret := _m.Called(ctx, playerName, discordID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, playerName, discordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadPlayer provides a mock function with given fields: ctx, playerName, playerLinkName
func (_m *PlayerUseCase) ReadPlayer(ctx context.Context, playerName string, playerLinkName string) (entity.Player, error) {
	ret := _m.Called(ctx, playerName, playerLinkName)

	var r0 entity.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.Player, error)); ok {
		return rf(ctx, playerName, playerLinkName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Player); ok {
		r0 = rf(ctx, playerName, playerLinkName)
	} else {
		r0 = ret.Get(0).(entity.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, playerName, playerLinkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlayerUseCase creates a new instance of PlayerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayerUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlayerUseCase {
	mock := &PlayerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
