// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antony-ramos/guildops/internal/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FailUseCase is an autogenerated mock type for the FailUseCase type
type FailUseCase struct {
	mock.Mock
}

// CreateFail provides a mock function with given fields: ctx, failReason, date, playerName
func (_m *FailUseCase) CreateFail(ctx context.Context, failReason string, date time.Time, playerName string) error {
	ret := _m.Called(ctx, failReason, date, playerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string) error); ok {
		r0 = rf(ctx, failReason, date, playerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFail provides a mock function with given fields: ctx, failID
func (_m *FailUseCase) DeleteFail(ctx context.Context, failID int) error {
	ret := _m.Called(ctx, failID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, failID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFailOnPLayer provides a mock function with given fields: ctx, playerName
func (_m *FailUseCase) ListFailOnPLayer(ctx context.Context, playerName string) ([]entity.Fail, error) {
	ret := _m.Called(ctx, playerName)

	var r0 []entity.Fail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Fail, error)); ok {
		return rf(ctx, playerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Fail); ok {
		r0 = rf(ctx, playerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Fail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFailOnRaid provides a mock function with given fields: ctx, date
func (_m *FailUseCase) ListFailOnRaid(ctx context.Context, date time.Time) ([]entity.Fail, error) {
	ret := _m.Called(ctx, date)

	var r0 []entity.Fail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]entity.Fail, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []entity.Fail); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Fail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFailOnRaidAndPlayer provides a mock function with given fields: ctx, raidName, playerName
func (_m *FailUseCase) ListFailOnRaidAndPlayer(ctx context.Context, raidName string, playerName string) ([]entity.Fail, error) {
	ret := _m.Called(ctx, raidName, playerName)

	var r0 []entity.Fail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]entity.Fail, error)); ok {
		return rf(ctx, raidName, playerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []entity.Fail); ok {
		r0 = rf(ctx, raidName, playerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Fail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, raidName, playerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFail provides a mock function with given fields: ctx, failID
func (_m *FailUseCase) ReadFail(ctx context.Context, failID int) (entity.Fail, error) {
	ret := _m.Called(ctx, failID)

	var r0 entity.Fail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Fail, error)); ok {
		return rf(ctx, failID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Fail); ok {
		r0 = rf(ctx, failID)
	} else {
		r0 = ret.Get(0).(entity.Fail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, failID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFail provides a mock function with given fields: ctx, failID, failReason
func (_m *FailUseCase) UpdateFail(ctx context.Context, failID int, failReason string) error {
	ret := _m.Called(ctx, failID, failReason)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, failID, failReason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFailUseCase creates a new instance of FailUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFailUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FailUseCase {
	mock := &FailUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
