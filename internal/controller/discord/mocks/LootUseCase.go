// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antony-ramos/guildops/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// LootUseCase is an autogenerated mock type for the LootUseCase type
type LootUseCase struct {
	mock.Mock
}

// CreateLoot provides a mock function with given fields: ctx, lootName, raidID, playerName
func (_m *LootUseCase) CreateLoot(ctx context.Context, lootName string, raidID int, playerName string) error {
	ret := _m.Called(ctx, lootName, raidID, playerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) error); ok {
		r0 = rf(ctx, lootName, raidID, playerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoot provides a mock function with given fields: ctx, lootID
func (_m *LootUseCase) DeleteLoot(ctx context.Context, lootID int) error {
	ret := _m.Called(ctx, lootID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, lootID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLootOnPLayer provides a mock function with given fields: ctx, playerName
func (_m *LootUseCase) ListLootOnPLayer(ctx context.Context, playerName string) ([]entity.Loot, error) {
	ret := _m.Called(ctx, playerName)

	var r0 []entity.Loot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Loot, error)); ok {
		return rf(ctx, playerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Loot); ok {
		r0 = rf(ctx, playerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Loot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPlayerToAssign provides a mock function with given fields: ctx, playerNames, difficulty
func (_m *LootUseCase) SelectPlayerToAssign(ctx context.Context, playerNames []string, difficulty string) (entity.Player, error) {
	ret := _m.Called(ctx, playerNames, difficulty)

	var r0 entity.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) (entity.Player, error)); ok {
		return rf(ctx, playerNames, difficulty)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) entity.Player); ok {
		r0 = rf(ctx, playerNames, difficulty)
	} else {
		r0 = ret.Get(0).(entity.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, playerNames, difficulty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLootUseCase creates a new instance of LootUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLootUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LootUseCase {
	mock := &LootUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
