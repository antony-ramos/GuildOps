// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antony-ramos/guildops/internal/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RaidUseCase is an autogenerated mock type for the RaidUseCase type
type RaidUseCase struct {
	mock.Mock
}

// CreateRaid provides a mock function with given fields: ctx, raidName, raidDate
func (_m *RaidUseCase) CreateRaid(ctx context.Context, raidName string, raidDate time.Time) (entity.Raid, error) {
	ret := _m.Called(ctx, raidName, raidDate)

	var r0 entity.Raid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (entity.Raid, error)); ok {
		return rf(ctx, raidName, raidDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) entity.Raid); ok {
		r0 = rf(ctx, raidName, raidDate)
	} else {
		r0 = ret.Get(0).(entity.Raid)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, raidName, raidDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRaid provides a mock function with given fields: ctx, raidID
func (_m *RaidUseCase) DeleteRaid(ctx context.Context, raidID int) error {
	ret := _m.Called(ctx, raidID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, raidID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRaidUseCase creates a new instance of RaidUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRaidUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RaidUseCase {
	mock := &RaidUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
